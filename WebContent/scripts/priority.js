// Generated by CoffeeScript 1.3.3
(function() {
  var CriterionView, SliderModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SliderModel = (function(_super) {

    __extends(SliderModel, _super);

    function SliderModel() {
      return SliderModel.__super__.constructor.apply(this, arguments);
    }

    return SliderModel;

  })(Backbone.Model);

  CriterionView = (function(_super) {

    __extends(CriterionView, _super);

    function CriterionView() {
      this.sliderStop = __bind(this.sliderStop, this);

      this.sliderChange = __bind(this.sliderChange, this);

      this.flipDirection = __bind(this.flipDirection, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return CriterionView.__super__.constructor.apply(this, arguments);
    }

    CriterionView.prototype.initialize = function() {
      this.model = new SliderModel;
      this.model.set({
        'id': $(this.el).attr('id'),
        'sliderValue': this.$('.slider').data('winbook-slidervalue'),
        'criterion': this.$('.criterionName').text(),
        'direction': this.$('.directionOfPreference').data('winbook-direction-up')
      });
      return this.render();
    };

    CriterionView.prototype.render = function() {
      var sliderDirNode;
      this.$('.slider').slider({
        orientation: 'vertical',
        value: this.model.get('sliderValue'),
        range: 'min',
        min: 0,
        max: 100
      });
      sliderDirNode = this.$('.arrow');
      if (this.model.get('direction') === 1) {
        sliderDirNode.toggleClass('ui-icon-arrowthick-1-n');
      } else {
        sliderDirNode.toggleClass('ui-icon-arrowthick-1-s');
      }
      return this;
    };

    CriterionView.prototype.events = {
      "click .directionOfPreference": "flipDirection",
      "slide .slider": "sliderChange",
      "slidechange .slider": "sliderStop"
    };

    CriterionView.prototype.flipDirection = function() {
      var spanNode;
      console.log("Flipping...xxx");
      spanNode = this.$('.arrow');
      spanNode.toggleClass('ui-icon-arrowthick-1-n').toggleClass('ui-icon-arrowthick-1-s');
      if (spanNode.hasClass('ui-icon-arrowthick-1-n')) {
        this.model.set({
          "direction": 1
        });
      } else {
        this.model.set({
          "direction": 0
        });
      }
      return this;
    };

    CriterionView.prototype.sliderChange = function(event, ui) {
      console.log("Slider value being changed to " + ui.value + " for criterion --> " + this.model.get('id'));
      return this;
    };

    CriterionView.prototype.sliderStop = function(event, ui) {
      console.log("Slider value stopped at val = " + ui.value);
      return this;
    };

    return CriterionView;

  })(Backbone.View);

  window.CriteriaView = (function(_super) {

    __extends(CriteriaView, _super);

    function CriteriaView() {
      this.initialize = __bind(this.initialize, this);
      return CriteriaView.__super__.constructor.apply(this, arguments);
    }

    CriteriaView.prototype.el = '#criteriaContainer';

    CriteriaView.prototype.initialize = function() {
      this.$('.criterion').each(function() {
        new CriterionView({
          el: $(this)
        });
        console.log("creating views...");
      });
      return this;
    };

    return CriteriaView;

  })(Backbone.View);

}).call(this);
